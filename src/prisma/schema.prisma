generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  // prisma tracks a shadow database to check if schemas drift
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}
// if a user signs in in multiple ways a unique acount is created for each of those methods
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // a user only gets one account per provider
  @@unique([provider, providerAccountId])
}

// a session is created when a user logs in from a device to allow passwordless auth temporarily
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model User {
  id            String    @id @default(cuid())

  // the underlying account name
  name          String?
  
  // email is either manually provided by user or provided by oauth
  email         String?   @unique
  emailVerified DateTime?

  // if they use a password for credentials
  password      String?

  // a canonical url to the users profile picture
  image         String?

  accounts      Account[]
  sessions      Session[]
  
  // this creates a shadow table that is just key matches
  followedBy    User[]    @relation("UserFollows")
  following     User[]    @relation("UserFollows")

  // a username / display name the user can change at will 
  username      String?

  // the users posts and comments
  posts         Post[]
  comments      Comment[]

  // the posts and comments they've liked
  postLikes     PostLike[]
  commentLikes  CommentLike[]
}

// a post on obelisk by a user
model Post {
  id          Int     @id @default(autoincrement())

  // the title of the post
  title       String
  
  // a canonical url to the post's image/video
  mediaUrl    String?
  
  // the text content of the post
  content     String
  
  // the tags the post has been assigned
  categories  Category[]

  createdAt   DateTime   @default(now())

  // the comments on the post
  comments    Comment[]

  // the owner of the post
  authorId    String
  author      User       @relation(fields: [authorId], references: [id])

  // the likes the post has recieved 
  likes       PostLike[]

  @@unique([id, createdAt(sort: Desc)], name: "id_createdAt")
}

// a tag that can be assigned to posts as well as to filter posts
model Category {
  id    String @id @default(uuid())
  name  String @unique
  posts Post[]
}

// a comment on an obelisk post
model Comment {
  id        Int        @id @default(autoincrement())
  
  // the content of the comment
  content   String

  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // the author of the comment
  authorId  String
  author    User          @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // the underlying post under which the comment is made
  postId    Int
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)

  // comments can be child comments or top-level and its a n - 1 relationship respectively
  parentId  Int?
  parent    Comment?      @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children  Comment[]     @relation("ParentChild")

  // the like a comment has recieved
  likes     CommentLike[]
}

// a like given by a user to a comment
model CommentLike {
  // the comment it was given to
  commentId Int
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  // the user who gave the like
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // a user can't like the same comment more than once
  @@id([userId, commentId])
}

// a like given by a user to a post
model PostLike {
  // the post it was given to
  postId Int
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  // the user who gave the like
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // a user can't like the same post more than once
  @@id([userId, postId])
}

model SearchQuery {
  id    String @id @default(cuid())
  query String
}
