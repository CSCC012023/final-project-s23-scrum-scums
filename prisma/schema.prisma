generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// model User {
//   id        String     @id @default(uuid())
//   email     String     @unique
//   password  String
//   followers Int        @default(0)
//   username  String?
//   comments  Comment[]
//   inscribes Inscribe[]
//   likes     Like[]

//   @@unique([email, password])
// }


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  comments  Comment[]
  inscribes Inscribe[]
  likes     Like[]
  password  String?
  followers Int        @default(0)
  username  String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Inscribe {
  id        String    @id @default(uuid())
  title     String
  content   String
  authorId  String
  createdAt DateTime  @default(now())
  comments  Comment[]
  author    User      @relation(fields: [authorId], references: [id])
}

model Comment {
  id         String    @id @default(uuid())
  content    String
  authorId   String
  inscribeId String
  createdAt  DateTime  @default(now())
  parentId   String?
  updatedAt  DateTime  @updatedAt
  author     User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  inscribe   Inscribe  @relation(fields: [inscribeId], references: [id], onDelete: Cascade)
  parent     Comment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children   Comment[] @relation("ParentChild")
  likes      Like[]
}

model Like {
  userId    String
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, commentId])
}
